@page "/movies"
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@inject lab5._1.Data.ApplicationDbContext DB
@using lab5._1.Components.Class
@inject NavigationManager NavigationManager
@rendermode InteractiveServer



<PageTitle>Index</PageTitle>

<h1>Index</h1>
<p>
    <a href="movies/create">Create New</a>
</p>


<QuickGrid Items="@MovieQueryable">
    <PropertyColumn Property="@(movie => movie.Title)" Sortable="true" />
    @if (isUserAuthenticated)
    {
        <PropertyColumn Property="@(movie => movie.Description)" Sortable="true" />
    }
    <PropertyColumn Property="@(movie => movie.RelaseDate)" Sortable="true" Format="dd-MM-yyyy" />
    <PropertyColumn Property="@(movie => movie.AverageRating)" Sortable="true">

    </PropertyColumn>

    <TemplateColumn Context="movie">
        <a href="@($"movies/edit?id={movie.Id}")">Edit</a> |
        <a href="@($"movies/details?id={movie.Id}")">Details</a> |
        <a href="@($"movies/delete?id={movie.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>


@code{
    IQueryable<Movie> MovieQueryable = Enumerable.Empty<Movie>().AsQueryable();
    private bool isUserAuthenticated;
    [SupplyParameterFromForm]
    Movie movie { get; set; } = new();
    DateOnly SelectedDate;
    static List<Movie> MoviesList = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isUserAuthenticated = authState.User.Identity.IsAuthenticated;

        ConvertListToQueryable();

    }

    private void ConvertListToQueryable()
    {
        MoviesList = DB.Movie.ToList();
        if (MoviesList is null) return;
        foreach (var movie in MoviesList.OrderBy(_ => _.Id))
        {
            MovieQueryable = MovieQueryable.Concat(new[] { movie }.AsQueryable());
        }
    }
    void GetDataAgain()
    {
        MovieQueryable = Enumerable.Empty<Movie>().AsQueryable();
        ConvertListToQueryable();
    }
   
    
}